service provided by the administrator server:
    CONDO LIST
    these servicies are synchronized on the condo list
    - insertion of a new house in the condo:
        - if not already present it is added to the condo and it is returned the condo list
        - if already present an error is returned
    - removal of a house:
        - remove the house from the condo list
    - condo list is returned to the administrator

    STATS
    Reduce the conflict between the services to a minimum
    - condo sends stats for the houses and updates them
    - administrator reads stats or aggregates them

    resolved conflicts generated from two houses entering or leaving at the same time.

    Understand how to make a mesh network works. Election and mutual exclusion algorithms. Message handling by the houses
    The house needs to have multiple threads that accomplish different tasks:
        - read user input from command line to perform boost requests or removal from the condo requests
        - calculate the local measurements usage with sliding window
        - send usage to the elected node
        - receive messages and start a thread with the correct response:
            - adjust topology: ack mechanism when a new node comes in or a node leaves.
            - mutual exclusion: save a queue of boost requests (richard and awart)
            - election: higher node elected (watch mechanism on slides)
            - if representative: receive usage and compute condo stat and send it to the server

    House registers to the condo.
    Receives the list of other houses.
    starts message receiver:
        - receive other stats and compute condo stats when a fresh measurement for each house is available
          if more recent measurements arrives either update the old one or take the average.
          if the house is not in the local condo add it
        - receive a new house insertion and add it to the local condo or tell her you are removing yourself
        - receive a house removal and act accordingly (may start and election and remove from boost queue)
        - receive election message and act accordingly
        - receive boost request and act accordingly (richart and awairt)
    informs other houses of its presence (wait for ack, leader tells who he is, if no ack remove from local condo)
    starts smart meter and sends other houses.
    if is the coordinator sends to the server condo stats when available the full bulk
    allow from command line to request boost or removal
    when removed from the server send all nodes in the local condo
    if removed release boost (remove from queue and send other nodes in queue the removal)

    ENTERING THE NETWORK
    when a house starts it sends every other houses in the condo (given by the server) a hello.
    The other houses, when they receive hello, add the sender the their condo and respond with a helloAck message.
    The hello sender adds to its local condo only the houses that responds to the hello with the ack.
    If a house remove itself it stops responding to messages except for the ack elected.
    This way situations like: H1 enters, sends Hello to H2, H2 exits, H1 doesn't add H2 because it didn't respond with ack.


    ELECTION
    At the beginning the only house present is the coordinator. Every node that has itself as coordinator responds to hello saying it is the coordinator.
    At removal the coordinator sends the house with the highest id in its condo a removal informing it it is the new coordinator.
    The new coordinator sends msg to everyone saying it's the new coordinator. Associated a counter to the coordinator to resolve
    issue related to removal of a node after he is elected. When a node receives a new coordinator, it updates it if the counter is higher
    than its, or if the counter is the same value and the new coordinator id is higher than the current one. This way is handled
    the problem when a house joins and there's only the coordinator, but the coordinator removes itself before it receives the hello and doesn't
    elect the new house. This is solved by having every house initialize itself as coordinator with counter -1. When another house will join
    the one with highest id will become coordinator. (Both hello and ack hello can elect coordinator).

    STATS
    stats are exchanged between the houses as described in the document (sliding window and overlap). Only the coordinator cares about
    the stats it receives. When it receives a stat it adds it to as the corresponding house stat. If all the houses in the condo have
    the stat set it sends the statpkg to the server (calculates the condo usage) and reset all the stats. No stat from a house gets
    used twice to calculate the condo usage. If a house send another stat only the one with the most recent timestamp is retained.
    Condo stats use the most recent timestamp of the housestat used for calculating it. This is done by StatCoordinator.
    Stats for a house remain in the AdminServer untill a new house with the same id enters the condo after the other has left.
    StatSender send stats for a single house periodically (waits for sliding windows to fill) to all the other houses in the condo.
    Only the coordinator will use that stat.

    BOOST
    implement ricart and agrawala mutual exclusion. One queue for each boost (in this case 2). When a boost is requested put yourself
    in the local request of each resource and send ok from yourself to yourself and send the boost request to all the condo.
    When receive a boost request check for each boost:
    - if you are not using or waiting for the resource send back an ok
    - if you are using the resource  add the request to the waiting queue
    - if you are waiting add the request to the waiting queue (ordered based on the timestamp of the request and the id of the node
      in case of equal timestamp). If the received request has an earlier timestamp than yours send ok to it.
    When receiving an OK add the sender to the ok queue and remove it form the waiting queue if present. If you got OK from all the
    condo for one boost you can get that boost. Before using the boost free the other boosts waiting queues by sending OK to all
    the waiting nodes. After using the boost send OK to all the nodes waiting on that boost.
    When a node enters the condo and sends you hello in addition to the hello ack send also a boost request to it if you are waiting on boost
    so he can send you back OK. The same thing happens when receiving a hello ack, send boost request to the node who sent the ack for the same
    reason.
    When a house removes itself sends OK to everyone in its waiting queue for each resource. No need to wait boost ending because ends the
    stats sending process before that.