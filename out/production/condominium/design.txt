service provided by the administrator server:
    CONDO LIST
    these servicies are synchronized on the condo list
    - insertion of a new house in the condo:
        - if not already present it is added to the condo and it is returned the condo list
        - if already present an error is returned
    - removal of a house:
        - remove the house from the condo list
    - condo list is returned to the administrator

    STATS
    Reduce the conflict between the services to a minimum
    - condo sends stats for the houses and updates them
    - administrator reads stats or aggregates them

    resolved conflicts generated from two houses entering or leaving at the same time.

    Understand how to make a mesh network works. Election and mutual exclusion algorithms. Message handling by the houses
    The house needs to have multiple threads that accomplish different tasks:
        - read user input from command line to perform boost requests or removal from the condo requests
        - calculate the local measurements usage with sliding window
        - send usage to the elected node
        - receive messages and start a thread with the correct response:
            - adjust topology: ack mechanism when a new node comes in or a node leaves.
            - mutual exclusion: save a queue of boost requests (richard and awart)
            - election: higher node elected (watch mechanism on slides)
            - if representative: receive usage and compute condo stat and send it to the server

    House registers to the condo.
    Receives the list of other houses.
    starts message receiver:
        - receive other stats and compute condo stats when a fresh measurement for each house is available
          if more recent measurements arrives either update the old one or take the average.
          if the house is not in the local condo add it
        - receive a new house insertion and add it to the local condo or tell her you are removing yourself
        - receive a house removal and act accordingly (may start and election and remove from boost queue)
        - receive election message and act accordingly
        - receive boost request and act accordingly (richart and awairt)
    informs other houses of its presence (wait for ack, leader tells who he is, if no ack remove from local condo)
    starts smart meter and sends other houses.
    if is the coordinator sends to the server condo stats when available the full bulk
    allow from command line to request boost or removal
    when removed from the server send all nodes in the local condo
    if removed release boost (remove from queue and send other nodes in queue the removal)

    ENTERING THE NETWORK
    when a house starts it sends every other houses in the condo (given by the server) a hello.
    The other houses respond to the hello with a message. The houses adds to her local condo only the houses that responds to the hello.
    If a house remove itself it stops receiving messages except for the ack elected.


    ELECTION
    At the beginning the only house present is the coordinator. Every node that has itself as coordinator responds to hello saying it is the coordinator.
    At removal the coordinator sends the house with the highest id in the condo a removal informing it it is the new coordinator.
    The new coordinator sends msg to everyone saying it's the new coordinator. Associated a counter to the coordinator to resolve
    issue related to removal of a node after he is elected. When a node receives a new coordinator, it updates it if the counter is higher
    than its, or if the counter is the same value it gets updated if the sender id is higher than the receiver. This way is handled
    the problem when a house joins and there's only the coordinator, but the coordinator removes itself before it receives the hello and doesn't
    elect the new house. This is solved by having every house initialize itself as coordinator with counter -1. When another house will join
    the one with highest id will become coordinator.